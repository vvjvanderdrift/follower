#!/usr/bin/env python3

import argparse

import rospy

from follower import controllers



if __name__ == '__main__':
    
    try:

        # Parse arguments from launch file
        parser = argparse.ArgumentParser()
        parser.add_argument('-m', '--model', default='kinematic_bicycle', choices=['kinematic_bicycle', 'dynamic_bicycle'], 
                            help='model to control', dest='model')
        parser.add_argument('--control_input_symbols', default='jx_domega', choices=['jx_domega', 'ax_omega', 'ax_delta', 'vx_delta'],
                            help='choose order of control inputs', dest='control_input_symbols')
        parser.add_argument('--ctrl_dt', default='0.01', help='controller integration stepsize (s)', type=float,
                            dest='ctrl_dt')
        args = parser.parse_args(rospy.myargv()[1:])

        
        ctrl_dt = args.ctrl_dt # Set to 0 for instant control as state message is arrived
        ego_model = args.model # kinematic_bicycle or dynamic_bicycle
        control_input_symbols = args.control_input_symbols

        rospy.init_node('follower', anonymous=True)
        rospy.loginfo(f"{rospy.get_name()} Starting follower control node at {ctrl_dt}s interval with {ego_model} settings")
                
        controller = controllers.LocalMotionTracker(ctrl_dt, ego_model, control_input_symbols)

        if(ctrl_dt):
            rospy.Timer(rospy.Duration(ctrl_dt), controller.timer_callback)
            rospy.loginfo(f"{rospy.get_name()} Started timed control loop")

        else:
            rospy.loginfo(f"{rospy.get_name()} Started untimed control loop")
        rospy.spin()

    except rospy.ROSInterruptException:
        pass
